@startuml vehicle_test

skinparam participant {
    BackgroundColor #FFE0D0
}
skinparam actor {
    BackgroundColor #D0E0FF
}

title Vehicle Test - Sequence Diagram

actor "Test Harness" as Test
participant "Initializer" as Initializer
participant "Vehicle" as Vehicle1
participant "Vehicle" as Vehicle2
participant "Vehicle" as Vehicle3
participant "TestComponent" as TC1
participant "TestComponent" as TC2
participant "TestComponent" as TC3

note over Test: Initialize test

note over Test: Test 1: Vehicle creation and basic properties
Test -> Initializer: create_vehicle(42)
Test <-- Initializer: vehicle1
Test -> Vehicle1: id()
Test <-- Vehicle1: 42
Test -> Vehicle1: running()
Test <-- Vehicle1: false

note over Test: Test 2: Vehicle lifecycle management
Test -> Vehicle1: start()
Vehicle1 -> Vehicle1: _running = true
Test <-- Vehicle1: void
Test -> Vehicle1: running()
Test <-- Vehicle1: true

Test -> Vehicle1: stop()
Vehicle1 -> Vehicle1: _running = false
Test <-- Vehicle1: void
Test -> Vehicle1: running()
Test <-- Vehicle1: false

note over Test: Testing multiple start/stop cycles
loop 3 times
    Test -> Vehicle1: start()
    Test <-- Vehicle1: void
    Test -> Vehicle1: running()
    Test <-- Vehicle1: true
    
    Test -> Vehicle1: stop()
    Test <-- Vehicle1: void
    Test -> Vehicle1: running()
    Test <-- Vehicle1: false
end

note over Test: Test 3: Component management
Test -> TC1: create(vehicle1, "TestComponent1")
Test <-- TC1: component1
Test -> TC2: create(vehicle1, "TestComponent2")
Test <-- TC2: component2
Test -> TC3: create(vehicle1, "TestComponent3")
Test <-- TC3: component3

Test -> Vehicle1: add_component(component1)
Test -> Vehicle1: add_component(component2)
Test -> Vehicle1: add_component(component3)

Test -> Vehicle1: start_components()
Vehicle1 -> TC1: start()
TC1 -> TC1: start_called = true\n_running = true
Vehicle1 -> TC2: start()
TC2 -> TC2: start_called = true\n_running = true
Vehicle1 -> TC3: start()
TC3 -> TC3: start_called = true\n_running = true

Test -> TC1: was_start_called()
Test <-- TC1: true
Test -> TC2: was_start_called()
Test <-- TC2: true
Test -> TC3: was_start_called()
Test <-- TC3: true

Test -> TC1: running()
Test <-- TC1: true
Test -> TC2: running()
Test <-- TC2: true
Test -> TC3: running()
Test <-- TC3: true

Test -> Vehicle1: stop_components()
Vehicle1 -> TC1: stop()
TC1 -> TC1: stop_called = true\n_running = false
Vehicle1 -> TC2: stop()
TC2 -> TC2: stop_called = true\n_running = false
Vehicle1 -> TC3: stop()
TC3 -> TC3: stop_called = true\n_running = false

Test -> TC1: was_stop_called()
Test <-- TC1: true
Test -> TC2: was_stop_called()
Test <-- TC2: true
Test -> TC3: was_stop_called()
Test <-- TC3: true

Test -> TC1: running()
Test <-- TC1: false
Test -> TC2: running()
Test <-- TC2: false
Test -> TC3: running()
Test <-- TC3: false

note over Test: Test 4: Verify components are started when vehicle starts
Test -> TC1: create(vehicle2, "TestComponent4")
Test <-- TC1: component4
Test -> TC2: create(vehicle2, "TestComponent5")
Test <-- TC2: component5

Test -> Initializer: create_vehicle(43)
Test <-- Initializer: vehicle2

Test -> Vehicle2: add_component(component4)
Test -> Vehicle2: add_component(component5)

Test -> Vehicle2: start()
Vehicle2 -> Vehicle2: _running = true
Vehicle2 -> Vehicle2: start_components()
Vehicle2 -> TC1: start()
TC1 -> TC1: start_called = true\n_running = true
Vehicle2 -> TC2: start()
TC2 -> TC2: start_called = true\n_running = true

Test -> Vehicle2: running()
Test <-- Vehicle2: true
Test -> TC1: was_start_called()
Test <-- TC1: true
Test -> TC2: was_start_called()
Test <-- TC2: true

note over Test: Test 5: Communication functionality
Test -> Initializer: create_vehicle(44)
Test <-- Initializer: vehicle3

Test -> Vehicle2: start()
Test -> Vehicle3: start()

Test -> Vehicle2: send("Hello from Vehicle Test!", size)
Test <-- Vehicle2: send_result > 0

note over Test: Test 6: Test invalid parameters for send/receive
Test -> Vehicle2: send(empty_data, 0)
Test <-- Vehicle2: 0

Test -> Vehicle2: receive(nullptr, 100)
Test <-- Vehicle2: 0
Test -> Vehicle2: receive(buffer, 0)
Test <-- Vehicle2: 0

note over Test: Test 7: Test receive after vehicle has stopped
Test -> Vehicle2: stop()
Vehicle2 -> Vehicle2: _running = false
Test -> Vehicle2: running()
Test <-- Vehicle2: false

Test -> Vehicle2: receive(buffer, size)
Test <-- Vehicle2: 0

note over Test: Test 8: Make sure vehicle destructor properly cleans up components
Test -> Test: delete vehicle2
Test -> Test: delete vehicle
Test -> Test: delete vehicle3

note over Test: Test completed

@enduml 