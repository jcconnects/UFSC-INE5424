@startuml Observer_Pattern_Sequence

' Process flow
participant Vehicle
participant Message
participant "Communicator\nextends Concurrent_Observer<Channel::Observer::Observed_Data,\nChannel::Observer::Observing_Condition>" as Communicator
participant Protocol
participant NIC
participant SocketEngine

autonumber
Vehicle -> Message: Create
Message -> Vehicle: Message
Vehicle -> Communicator: send(Message)
Communicator -> Protocol: send(address, BROADCAST, data, size)
activate Protocol
Protocol -> NIC: alloc(address, PROTO, size)
NIC --> Protocol: return buffer
note right of Protocol: Copy data to buffer
Protocol -> NIC: send(buffer)
NIC -> SocketEngine: sendto(...)
deactivate Protocol

==== Network Layer Boundary ====

' NIC receives data from the network
SocketEngine -> NIC: notify(PROTO, buffer)
NIC -> Protocol: notify(PROTO, buffer)
Protocol -> Protocol: update(&_observed, PROTO, buffer)
Protocol -> Communicator: notify(condition, data)
Communicator -> Communicator: update(condition, data)
note right of Communicator: Calls update and releases the thread waiting for data
Vehicle -> Communicator: receive(Message)
note right of Vehicle: Updated that data is available

@enduml 