@startuml 03-class_diagram

class Buffer<T> {
  - _data: std::uint8_t[MAX_SIZE]
  - _size: unsigned int
  + {static} MAX_SIZE: unsigned int
  + Buffer()
  + Buffer(data: const void*, size: unsigned int)
  + ~Buffer()
  + data(): T*
  + setData(data: const void*, size: unsigned int): void
  + size(): const unsigned int
  + setSize(size: unsigned int): void
  + clear(): void
}

class Communicator<Channel> {
  + {static} MAX_MESSAGE_SIZE: unsigned int
  - _channel: Channel*
  - _address: Address
  - _closed: std::atomic<bool>
  + Communicator(channel: Channel*, address: Address)
  + ~Communicator()
  + send(destination: const Address&, message: const Message<MaxSize>*): bool
  + receive(message: Message<MaxSize>*, source_address: Address* = nullptr): bool
  + close(): void
  + is_closed(): bool
  - update(obs: Channel::Observed*, c: Channel::Observer::Observing_Condition, buf: Buffer*): void
  .. Typedefs ..
  + Observer: typedef
  + Buffer: typedef
  + Address: typedef
  + Port: typedef
  .. Deleted methods ..
  + Communicator(const Communicator&) = delete
  + operator=(const Communicator&) = delete
}

note top of Communicator
  Inherits from Concurrent_Observer<
    typename Channel::Observer::Observed_Data,
    typename Channel::Observer::Observing_Condition>
end note

class Ethernet {
  + {static} MTU: unsigned int
  + {static} MAC_SIZE: unsigned int
  + {static} HEADER_SIZE: unsigned int
  + {static} NULL_ADDRESS: Address
  + {static} BROADCAST: Address
  + Ethernet() = default
  + ~Ethernet() = default
  + {static} mac_to_string(addr: Address): std::string
  .. Nested types ..
  + Address: struct
  + Protocol: typedef
  + Frame: struct
}

class "Ethernet::Address" as EthernetAddress <<struct>> {
  + bytes: std::uint8_t[MAC_SIZE]
}

note top of EthernetAddress
  + operator==(other: const Address&): bool
  + operator!=(other: const Address&): bool
  defined as global inline functions
end note

class "Ethernet::Frame" as EthernetFrame <<struct>> {
  + dst: Address
  + src: Address
  + prot: Protocol
  + payload: std::uint8_t[MTU]
}

class Initializer {
  + Initializer() = default
  + ~Initializer() = default
  + {static} create_vehicle(id: unsigned int): Vehicle*
  .. Typedefs ..
  + VehicleNIC: typedef NIC<SocketEngine>
  + CProtocol: typedef Protocol<VehicleNIC>
}

class "Message<MaxSize>" as Message {
  - _data: unsigned char[MAX_SIZE]
  - _size: unsigned int
  - _origin: TheAddress
  + {static} MAX_SIZE: unsigned int
  + Message()
  + Message(data: const void*, size: unsigned int)
  + Message(other: const Message&)
  + operator=(other: const Message&): Message&
  + data(): const void*
  + data(): void*
  + size(): const unsigned int
  + origin(): const TheAddress&
  + origin(addr: const TheAddress&): void
}

note bottom of Message
  TheMessage = Message<Constants::MAX_MESSAGE_SIZE>
end note

class "NIC<ExternalEngine, InternalEngine>" as NIC {
  + {static} N_BUFFERS: unsigned int
  - _external_engine: ExternalEngine
  - _internal_engine: InternalEngine
  - _address: Address
  - _running: std::atomic<bool>
  - _nic_ep_fd: int
  - _stop_event_fd: int
  - _event_thread: pthread_t
  - _statistics: Statistics
  - _buffer: DataBuffer[N_BUFFERS]
  - _free_buffers: std::queue<DataBuffer*>
  - _free_buffer_count: unsigned int
  - _binary_sem: sem_t
  # NIC()
  + ~NIC()
  + send(buf: DataBuffer*): int
  + receive(buf: DataBuffer*, src: Address*, dst: Address*, data: void*, size: unsigned int): int
  + alloc(dst: Address, prot: Protocol_Number, size: unsigned int): DataBuffer*
  + free(buf: DataBuffer*): void
  + address(): const Address&
  + setAddress(address: Address): void
  + statistics(): const Statistics&
  + stop(): void
  - handleExternalEvent(): void
  - handleInternalEvent(buf: DataBuffer*, size: int): void
  - eventLoop(arg: void*): static void*
  - setupNicEpoll(): void
  .. Typedefs ..
  + Address: typedef Ethernet::Address
  + Protocol_Number: typedef Ethernet::Protocol
  + DataBuffer: typedef Buffer<Ethernet::Frame>
  + Observer: typedef Conditional_Data_Observer<DataBuffer, Protocol_Number>
  + Observed: typedef Conditionally_Data_Observed<DataBuffer, Protocol_Number>
  .. Nested types ..
  + Statistics: struct 
}

note top of NIC
  Inherits from:
  - Ethernet
  - Conditionally_Data_Observed<Buffer<Ethernet::Frame>, Ethernet::Protocol>
end note

class "NIC<ExternalEngine, InternalEngine>::Statistics" as NICStatistics <<struct>> {
  + packets_sent_external: std::atomic<unsigned int>
  + packets_received_external: std::atomic<unsigned int>
  + bytes_sent_external: std::atomic<unsigned int>
  + bytes_received_external: std::atomic<unsigned int>
  + tx_drops_external: std::atomic<unsigned int>
  + rx_drops_external: std::atomic<unsigned int>
  + packets_sent_internal: std::atomic<unsigned int>
  + packets_received_internal: std::atomic<unsigned int>
  + bytes_sent_internal: std::atomic<unsigned int>
  + bytes_received_internal: std::atomic<unsigned int>
  + tx_drops_internal: std::atomic<unsigned int>
  + rx_drops_internal: std::atomic<unsigned int>
  + Statistics()
}

class "Conditional_Data_Observer<T, Condition>" as ConditionalDataObserver {
  # _rank: Condition
  # _data: List<T>
  + {typedef} Observed_Data
  + {typedef} Observing_Condition
  + {typedef} Observed
  + Conditional_Data_Observer(c: Condition)
  + {virtual} ~Conditional_Data_Observer() = default
  + {virtual} update(c: Condition, d: Observed_Data*): void
  + {virtual} updated(): T*
  + rank(): const Condition
}

class "Conditionally_Data_Observed<T, Condition>" as ConditionallyDataObserved {
  # _observers: Observers
  + {typedef} Observed_Data
  + {typedef} Observing_Condition
  + {typedef} Observer
  + {typedef} Observers: Ordered_List<Observer, Condition>
  + Conditionally_Data_Observed() = default
  + {virtual} ~Conditionally_Data_Observed() = default
  + attach(o: Observer*, c: Condition): void
  + detach(o: Observer*, c: Condition): void
  + notify(c: Condition, d: T*): bool
}

class "Concurrent_Observer<D, C>" as ConcurrentObserver {
  - _semaphore: SemaphoreWrapper
  + {typedef} Observed_Data
  + {typedef} Observing_Condition
  + {typedef} Observed
  + Concurrent_Observer(rank: C)
  + ~Concurrent_Observer() = default
  + update(c: C, d: D*): void override
  + updated(): D*
}

note bottom of ConcurrentObserver
  Inherits from Conditional_Data_Observer<D, C>
end note

class "Concurrent_Observed<D, C>" as ConcurrentObserved {
  - _mtx: pthread_mutex_t
  - _observers: Observers
  + {typedef} Observed_Data
  + {typedef} Observing_Condition
  + {typedef} Observers: Ordered_List<Concurrent_Observer<D, C>, C>
  + Concurrent_Observed()
  + ~Concurrent_Observed()
  + attach(o: Concurrent_Observer<D, C>*, c: C): void
  + detach(o: Concurrent_Observer<D, C>*, c: C): void
  + notify(c: C, d: D*): bool
}

note bottom of ConcurrentObserved
  Inherits from Conditionally_Data_Observed<D, C>
end note

class "Protocol<NIC>" as ProtocolNIC {
  + {static} PROTO: NIC::Protocol_Number
  + {static} MTU: unsigned int
  - _nic: NIC*
  - {static} _observed: Observed
  + Protocol(nic: NIC*)
  + ~Protocol()
  + send(from: Address, to: Address, data: const void*, size: unsigned int): int
  + receive(buf: Buffer*, from: Address*, data: void*, size: unsigned int): int
  + free(buf: Buffer*): void
  + {static} attach(obs: Observer*, address: Address): void
  + {static} detach(obs: Observer*, address: Address): void
  - update(prot: NIC::Protocol_Number, buf: Buffer*): void override
  .. Typedefs ..
  + Buffer: typedef
  + Physical_Address: typedef
  + Port: typedef
  + Observer: typedef
  + Observed: typedef
  + Data: typedef
}

note top of ProtocolNIC
  Inherits from NIC::Observer
end note

class "Protocol<NIC>::Header" as ProtocolHeader {
  - _from_port: Port
  - _to_port: Port
  - _size: unsigned int
  + Header()
  + from_port(): Port const
  + from_port(p: Port): void
  + to_port(): Port const
  + to_port(p: Port): void
  + size(): unsigned int const
  + size(s: unsigned int): void
}

class "Protocol<NIC>::Packet" as ProtocolPacket {
  - _data: Data
  + Packet()
  + header(): Header*
  + data<T>(): T*
}

class "Protocol<NIC>::Address" as ProtocolAddress {
  - _port: Port
  - _paddr: Physical_Address
  + {static} BROADCAST: Address
  + Address()
  + Address(null: Null)
  + Address(paddr: Physical_Address, port: Port)
  + paddr(addr: Physical_Address): void
  + paddr(): const Physical_Address&
  + port(port: Port): void
  + port(): const Port&
  + to_string(): std::string
  + operator bool(): bool const
  + operator==(a: const Address&): bool const
  .. Nested types ..
  + Null: enum
}

note top of ProtocolPacket
  Inherits from Protocol<NIC>::Header
end note

class SocketEngine {
  + {static} INTERFACE(): const char*
  # _sock_fd: int
  # _if_index: int
  # _mac_address: Ethernet::Address
  - _running: std::atomic<bool>
  + SocketEngine()
  + ~SocketEngine()
  + start(): void
  + stop(): void
  + running(): const bool const
  + send(frame: Ethernet::Frame*, size: unsigned int): int
  + receiveFrame(frame_buffer: Ethernet::Frame&): int
  + getMacAddress(): Ethernet::Address const
  + getNotificationFd(): int const
  - setUpSocket(): void
}

class Vehicle {
  + {static} MAX_MESSAGE_SIZE: unsigned int
  - _id: unsigned int
  - _protocol: TheProtocol*
  - _nic: TheNIC*
  - _base_address: TheAddress
  - _next_component_id: unsigned int
  - _running: std::atomic<bool>
  - _components: std::vector<std::unique_ptr<Component>>
  + Vehicle(id: unsigned int, nic: TheNIC*, protocol: TheProtocol*)
  + ~Vehicle()
  + id(): const unsigned int const
  + running(): const bool const
  + start(): void
  + stop(): void
  + add_component(component: std::unique_ptr<Component>): void
  + start_components(): void
  + stop_components(): void
  + address(): TheAddress const
  + protocol(): TheProtocol* const
  + next_component_address(): TheAddress
}

class Component {
  # _vehicle: Vehicle*
  # _name: std::string
  # _running: std::atomic<bool>
  # _thread: pthread_t
  # _communicator: std::unique_ptr<TheCommunicator>
  # _protocol: TheProtocol*
  # _log_file: std::ofstream
  + Component(vehicle: Vehicle*, name: const std::string&, protocol: TheProtocol*, address: TheAddress)
  + {virtual} ~Component() = default
  + {virtual} start(): void
  + {virtual} stop(): void
  + {virtual} run(): void = 0
  + running(): bool const
  + getName(): const std::string&
  + vehicle(): Vehicle* const
  + log_file(): std::ofstream*
  + send(destination: const TheAddress&, data: const void*, size: unsigned int): int
  + receive(data: void*, max_size: unsigned int, source_address: TheAddress* = nullptr): int
  # thread_entry_point(arg: void*): static void*
  # open_log_file(filename_prefix: const std::string&): void
  # close_log_file(): void
  .. Deleted methods ..
  - Component(const Component&) = delete
  - operator=(const Component&) = delete
}

class BatteryComponent {
  - _ecu2_address: TheAddress
  - _broadcast_address: TheAddress
  - _rd: std::random_device
  - _gen: std::mt19937
  - _voltage_dist: std::uniform_real_distribution<>
  - _current_dist: std::uniform_real_distribution<>
  - _temp_dist: std::uniform_real_distribution<>
  - _soc_dist: std::uniform_real_distribution<>
  - _delay_dist: std::uniform_int_distribution<>
  + BatteryComponent(vehicle: Vehicle*, name: const std::string&, protocol: TheProtocol*, address: TheAddress)
  + run(): void override
}

class CameraComponent {
  - _ecu1_address: TheAddress
  - _broadcast_address: TheAddress
  - _rd: std::random_device
  - _gen: std::mt19937
  - _coord_dist: std::uniform_real_distribution<>
  - _size_dist: std::uniform_real_distribution<>
  - _label_dist: std::uniform_int_distribution<>
  - _delay_dist: std::uniform_int_distribution<>
  - _labels: const std::vector<std::string>
  + CameraComponent(vehicle: Vehicle*, name: const std::string&, protocol: TheProtocol*, address: TheAddress)
  + run(): void override
}

class ECUComponent {
  + ECUComponent(vehicle: Vehicle*, name: const std::string&, protocol: TheProtocol*, address: TheAddress)
  + run(): void override
}

class LidarComponent {
  - _ecu2_address: TheAddress
  - _broadcast_address: TheAddress
  - _rd: std::random_device
  - _gen: std::mt19937
  - _coord_dist: std::uniform_real_distribution<>
  - _intensity_dist: std::uniform_real_distribution<>
  - _num_points_dist: std::uniform_int_distribution<>
  - _delay_dist: std::uniform_int_distribution<>
  + LidarComponent(vehicle: Vehicle*, name: const std::string&, protocol: TheProtocol*, address: TheAddress)
  + run(): void override
}

class INSComponent {
  - _ecu1_address: TheAddress
  - _broadcast_address: TheAddress
  - _rd: std::random_device
  - _gen: std::mt19937
  - _lat_dist: std::uniform_real_distribution<>
  - _lon_dist: std::uniform_real_distribution<>
  - _alt_dist: std::uniform_real_distribution<>
  - _vel_dist: std::uniform_real_distribution<>
  - _accel_dist: std::uniform_real_distribution<>
  - _gyro_dist: std::uniform_real_distribution<>
  - _heading_dist: std::uniform_real_distribution<>
  - _delay_dist: std::uniform_int_distribution<>
  + INSComponent(vehicle: Vehicle*, name: const std::string&, protocol: TheProtocol*, address: TheAddress)
  + run(): void override
}

class SharedMemoryEngine {
  + SharedMemoryEngine()
  + ~SharedMemoryEngine()
  + start(): void
  + stop(): void
  + send(frame: Ethernet::Frame*, size: unsigned int): int
  + getMacAddress(): Ethernet::Address const
  .. Deleted methods ..
  + SharedMemoryEngine(const SharedMemoryEngine&) = delete
  + operator=(const SharedMemoryEngine&) = delete
}

' Communicator Relationships
Communicator ..> Message : uses
Communicator ..> Buffer : uses
ConcurrentObserver <|-- Communicator

' NIC Relationships
Ethernet <|-- NIC
ConditionallyDataObserved <|-- NIC
NIC *-- "1" NICStatistics : _statistics
NIC <.. Initializer : friend
NIC ..> Buffer : uses
NIC *-- "1" SocketEngine : _external_engine
NIC *-- "1" SharedMemoryEngine : _internal_engine


' Protocol Relationships
ProtocolHeader <|-- ProtocolPacket : inherits
ProtocolNIC o-- "1" NIC : _nic
ProtocolNIC *-- "1" ConditionallyDataObserved : _observed > static
ProtocolNIC +-- "1" ProtocolHeader : nested class
ProtocolNIC +-- "1" ProtocolPacket : nested class
ProtocolNIC +-- ProtocolAddress : nested class

' Vehicle Relationships
Vehicle o-- "1" ProtocolNIC : _protocol
Vehicle o-- "1" NIC : _nic
Vehicle o-- "1" Communicator : _comms
Vehicle o-- "*" Component : _components

' Ethernet Relationships
Ethernet +-- EthernetAddress : nested class
Ethernet +-- EthernetFrame : nested class
EthernetFrame o-- "2" EthernetAddress : dst,src
Ethernet o-- "1" EthernetAddress : NULL_ADDRESS > static

' Observer Relationships
ConcurrentObserver <.. ConcurrentObserved : <<friend>>
ConditionalDataObserver -- ConditionallyDataObserved : <<observes>>
ConditionalDataObserver <|-- ConcurrentObserver
ConditionalDataObserver ..> ConditionallyDataObserved : <<friend>>
ConcurrentObserver ..> ConcurrentObserved : <<friend>>
ConcurrentObserver -- ConcurrentObserved : <<observes>>

' Observed Relationships
ConditionallyDataObserved <|-- ConcurrentObserved

' Component Relationships
Component o-- "1" Communicator : _communicator
Component o-- "1" Vehicle : _vehicle
Component <|-- BatteryComponent : inherits
Component <|-- CameraComponent : inherits
Component <|-- ECUComponent : inherits
Component <|-- LidarComponent : inherits
Component <|-- INSComponent : inherits



@enduml
