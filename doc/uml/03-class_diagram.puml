@startuml 03-class_diagram

class Buffer<T> {
  - _data: std::uint8_t[MAX_SIZE]
  - _size: unsigned int
  + {static} MAX_SIZE: unsigned int
  + Buffer()
  + Buffer(data: const void*, size: unsigned int)
  + ~Buffer()
  + data(): T*
  + setData(data: const void*, size: unsigned int): void
  + size(): const unsigned int
  + setSize(size: unsigned int): void
  + clear(): void
}

class Component {
  # _vehicle: Vehicle*
  # _name: std::string
  # _running: std::atomic<bool>
  # _thread: pthread_t
  # _log_file: std::ofstream
  # _log_mutex: pthread_mutex_t
  + Component(vehicle: Vehicle*, name: const std::string&)
  + {virtual} ~Component()
  + {virtual} start() = 0
  + {virtual} signal_stop()
  + {virtual} join()
  + {virtual} stop()
  + running(): const bool
  + name(): const std::string&
  + vehicle(): Vehicle*
  + log_file(): std::ofstream*
  # open_log_file(filename: const std::string&): void
  # close_log_file(): void
  # write_to_log(line: const std::string&): void
}

class Communicator<Channel> {
  + {static} MAX_MESSAGE_SIZE: unsigned int
  - _channel: Channel*
  - _address: Address
  - _closed: bool
  + Communicator(channel: Channel*, address: Address)
  + ~Communicator()
  + send(message: const Message<MAX_MESSAGE_SIZE>*): bool
  + receive(message: Message<MAX_MESSAGE_SIZE>*): bool
  + close(): void
  + reopen(): void
  + is_closed(): bool
  - update(obs: Channel::Observed*, c: Channel::Observer::Observing_Condition, buf: Buffer*): void
  .. Typedefs ..
  + Observer: typedef
  + Buffer: typedef
  + Address: typedef
  + Port: typedef
  .. Deleted methods ..
  + Communicator(const Communicator&) = delete
  + operator=(const Communicator&) = delete
}

note top of Communicator
  Inherits from Concurrent_Observer<
    typename Channel::Observer::Observed_Data,
    typename Channel::Observer::Observing_Condition>
end note

class Ethernet {
  + {static} MTU: unsigned int
  + {static} MAC_SIZE: unsigned int
  + {static} HEADER_SIZE: unsigned int
  + {static} NULL_ADDRESS: Address
  + Ethernet()
  + ~Ethernet()
  + {static} mac_to_string(addr: Address): std::string
  .. Nested types ..
  + Address: struct
  + Protocol: typedef
  + Frame: struct
}

class "Ethernet::Address" as EthernetAddress <<struct>> {
  + bytes: std::uint8_t[MAC_SIZE]
}

class "Ethernet::Frame" as EthernetFrame <<struct>> {
  + dst: Address
  + src: Address
  + prot: Protocol
  + payload: std::uint8_t[MTU]
}

class Initializer {
  + Initializer() = default
  + ~Initializer() = default
  + {static} create_vehicle(id: unsigned int): Vehicle*
  .. Typedefs ..
  + VehicleNIC: typedef NIC<SocketEngine>
  + CProtocol: typedef Protocol<VehicleNIC>
}

class "Message<MaxSize>" as Message {
  - _data: void*[MAX_SIZE]
  - _size: unsigned int
  + {static} MAX_SIZE: unsigned int
  + Message()
  + Message(data: const void*, size: unsigned int)
  + Message(other: const Message&)
  + operator=(other: const Message&): Message&
  + data(): const void*
  + size(): const unsigned int
}

class "NIC<Engine>" as NIC {
  + {static} BUFFER_SIZE: unsigned int
  + {static} N_BUFFERS: unsigned int
  - _statistics: Statistics
  - _buffer: DataBuffer[N_BUFFERS]
  - _free_buffers: std::queue<DataBuffer*>
  - _buffer_sem: sem_t
  - _binary_sem: sem_t
  # NIC()
  + ~NIC()
  + send(buf: DataBuffer*): int
  + receive(buf: DataBuffer*, src: Address*, dst: Address*, data: void*, size: unsigned int): int
  + alloc(dst: Address, prot: Protocol_Number, size: unsigned int): DataBuffer*
  + free(buf: DataBuffer*): void
  + address(): const Address&
  + setAddress(address: Address): void
  + statistics(): const Statistics&
  - receiveData(frame: Ethernet::Frame&, size: unsigned int): void
  .. Typedefs ..
  + Address: typedef Ethernet::Address
  + Protocol_Number: typedef Ethernet::Protocol
  + DataBuffer: typedef Buffer<Ethernet::Frame>
  + Observer: typedef Conditional_Data_Observer<DataBuffer, Protocol_Number>
  + Observed: typedef Conditionally_Data_Observed<DataBuffer, Protocol_Number>
  .. Nested types ..
  + Statistics: struct 
}

note top of NIC
  Inherits from:
  - Ethernet
  - Conditionally_Data_Observed<Buffer<Ethernet::Frame>, Ethernet::Protocol>
  - Engine (private)
end note

class "NIC<Engine>::Statistics" as NICStatistics <<struct>> {
  + packets_sent: std::atomic<unsigned int>
  + packets_received: std::atomic<unsigned int>
  + bytes_sent: std::atomic<unsigned int>
  + bytes_received: std::atomic<unsigned int>
  + tx_drops: std::atomic<unsigned int>
  + rx_drops: std::atomic<unsigned int>
  + Statistics()
}

class "NIC<Engine>::Observer" as NICObserver {
}

note top of NICObserver
  typedef Conditional_Data_Observer<DataBuffer, Protocol_Number>
end note

class "Conditional_Data_Observer<T, Condition>" as ConditionalDataObserver {
  # _rank: Condition
  - _data: List<T>
  + {typedef} Observed_Data
  + {typedef} Observing_Condition
  + {typedef} Observed
  + Conditional_Data_Observer(c: Condition)
  + ~Conditional_Data_Observer() = default
  + {virtual} update(c: Condition, d: Observed_Data*): void
  + updated(): T*
  + rank(): const Condition
}

class "Conditionally_Data_Observed<T, Condition>" as ConditionallyDataObserved {
  - _observers: Observers
  + {typedef} Observed_Data
  + {typedef} Observing_Condition
  + {typedef} Observer
  + {typedef} Observers
  + Conditionally_Data_Observed() = default
  + ~Conditionally_Data_Observed() = default
  + attach(o: Observer*, c: Condition): void
  + detach(o: Observer*, c: Condition): void
  + notify(c: Condition, d: T*): bool
}

class "Concurrent_Observer<D, C>" as ConcurrentObserver {
  - _semaphore: SemaphoreWrapper
  + {typedef} Observed_Data
  + {typedef} Observing_Condition
  + {typedef} Observed
  + Concurrent_Observer(rank: C)
  + ~Concurrent_Observer() = default
  + update(c: C, d: D*): void
  + updated(): D*
}

note bottom of ConcurrentObserver
  Inherits from Conditional_Data_Observer<D, C>
end note

class "Concurrent_Observed<D, C>" as ConcurrentObserved {
  - _mtx: pthread_mutex_t
  + {typedef} Observed_Data
  + {typedef} Observing_Condition
  + {typedef} Observers
  + Concurrent_Observed()
  + ~Concurrent_Observed()
  + attach(o: Concurrent_Observer<D, C>*, c: C): void
  + detach(o: Concurrent_Observer<D, C>*, c: C): void
}

note bottom of ConcurrentObserved
  Inherits from Conditionally_Data_Observed<D, C>
end note

class "Protocol<NIC>" as ProtocolNIC {
  + {static} PROTO: NIC::Protocol_Number
  + {static} MTU: unsigned int
  - _nic: NIC*
  - {static} _observed: Observed
  - _active: bool
  + Protocol(nic: NIC*)
  + ~Protocol()
  + send(from: Address, to: Address, data: const void*, size: unsigned int): int
  + receive(buf: Buffer*, from: Address, data: void*, size: unsigned int): int
  + {static} attach(obs: Observer*, address: Address): void
  + {static} detach(obs: Observer*, address: Address): void
  + active(): bool
  + signal_stop(): void
  + reactive(): bool
  - update(prot: NIC::Protocol_Number, buf: Buffer*): void
  .. Typedefs ..
  + Buffer: typedef
  + Physical_Address: typedef
  + Port: typedef
  + Observer: typedef
  + Observed: typedef
  + Data: typedef
}

note top of ProtocolNIC
  Inherits from NIC::Observer
end note

class "Protocol<NIC>::Header" as ProtocolHeader {
  - _from_port: Port
  - _to_port: Port
  - _size: unsigned int
  + Header()
  + from_port(): Port
  + from_port(p: Port): void
  + to_port(): Port
  + to_port(p: Port): void
  + size(): unsigned int
  + size(s: unsigned int): void
}

class "Protocol<NIC>::Packet" as ProtocolPacket {
  - _data: Data
  + Packet()
  + header(): Header*
  + data<T>(): T*
}

note top of ProtocolPacket
  Inherits from Protocol<NIC>::Header
end note

class SocketEngine {
  + {static} INTERFACE: const char*
  - _sock_fd: int
  - _ep_fd: int
  - _if_index: int
  - _callback: CallbackMethod
  - _receive_thread: pthread_t
  # _address: Ethernet::Address
  - {static} _running: bool
  + SocketEngine()
  + ~SocketEngine()
  + setCallback(callback: CallbackMethod): void
  + send(frame: Ethernet::Frame*, size: unsigned int): int
  + {static} run(arg: void*): void*
  + stop(): void
  - setUpSocket(): void
  - setUpEpoll(): void
  - handleSignal(): void
  .. Typedefs ..
  + CallbackMethod: typedef std::function<void(Ethernet::Frame&, unsigned int)>
}

class Vehicle {
  + {static} MAX_MESSAGE_SIZE: unsigned int
  - _id: unsigned int
  - _protocol: Protocol<NIC<SocketEngine>>*
  - _nic: NIC<SocketEngine>*
  - _comms: Communicator<Protocol<NIC<SocketEngine>>>*
  - _running: std::atomic<bool>
  + Vehicle(id: unsigned int, nic: NIC<SocketEngine>*, protocol: Protocol<NIC<SocketEngine>>*)
  + ~Vehicle()
  + id(): const unsigned int
  + running(): const bool
  + start(): void
  + stop(): void
  + add_component(component: Component*): void
  + start_components(): void
  + signal_components(): void
  + join_components(): void
  + send(data: const void*, size: unsigned int): int
  + receive(data: void*, size: unsigned int): int
}

class SemaphoreWrapper {
  # ifdef __APPLE__
  - _sem: sem_t*
  - _name: char[32]
  - {static} _sem_count: std::atomic<int>
  # else
  - _sem: sem_t
  # endif
  + SemaphoreWrapper(initial_value: int = 0)
  + ~SemaphoreWrapper()
  + post(): void
  + wait(): void
  .. Deleted methods ..
  + SemaphoreWrapper(const SemaphoreWrapper&) = delete
  + operator=(const SemaphoreWrapper&): SemaphoreWrapper& = delete
}

class ReceiverComponent {
  + ReceiverComponent(vehicle: Vehicle*)
  + {override} start(): void
  + {override} signal_stop(): void
  + {override} stop(): void
  - {static} run(arg: void*): void*
}

class SenderComponent {
  + SenderComponent(vehicle: Vehicle*)
  + {override} start(): void
  + {override} signal_stop(): void
  + {override} stop(): void
  - {static} run(arg: void*): void*
}

' Communicator Relationships
ConcurrentObserver <|-- Communicator
Communicator ..> Message : uses
Communicator ..> Buffer : uses

' NIC Relationships
Ethernet <|-- NIC
ConditionallyDataObserved <|-- NIC
SocketEngine <|-- NIC : private
NIC *-- "1" NICStatistics : _statistics
NIC <.. Initializer : friend
NIC ..> Buffer : uses

' Protocol Relationships
ConditionalDataObserver <|-- NICObserver
NICObserver <|-- ProtocolNIC : private
ProtocolHeader <|-- ProtocolPacket
ProtocolNIC o-- "1" NIC : _nic
ProtocolNIC *-- "1" ConditionallyDataObserved : _observed > static
ProtocolNIC +-- "1" ProtocolHeader : nested class
ProtocolNIC +-- "1" ProtocolPacket : nested class

' SocketEngine Relationships
SocketEngine o-- "1" EthernetAddress : _address

' Vehicle Relationships
Vehicle o-- "1" ProtocolNIC : _protocol
Vehicle o-- "1" NIC : _nic
Vehicle o-- "1" Communicator : _comms

' Ethernet Relationships
Ethernet +-- EthernetAddress : nested class
Ethernet +-- EthernetFrame : nested class
EthernetFrame o-- "2" EthernetAddress : dst,src
Ethernet o-- "1" EthernetAddress : NULL_ADDRESS > static

' Observer Relationships
ConditionalDataObserver <|-- ConcurrentObserver
ConditionalDataObserver ..> ConditionallyDataObserved : <<friend>>
ConcurrentObserver ..> ConcurrentObserved : <<friend>>
ConcurrentObserver *-- "1" SemaphoreWrapper : _semaphore
ConcurrentObserver -- ConcurrentObserved : <<observes>>

' Observed Relationships
ConditionallyDataObserved <|-- ConcurrentObserved
ConditionalDataObserver -- ConditionallyDataObserved : <<observes>>

' Component Relationships
Component o-- "1" Vehicle : _vehicle
Component <|-- ReceiverComponent
Component <|-- SenderComponent

@enduml
