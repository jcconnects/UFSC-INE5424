@startuml Component Architecture

skinparam classAttributeIconSize 0
skinparam defaultFontName Segoe UI
skinparam defaultFontSize 12
hide empty members

package "Initialization" {
    class Initializer {
        + {static} create_vehicle(id) : Vehicle*
        + {static} <SpecificComponentType> create_component(vehicle, name, ...) : SpecificComponentType*
    }
}

package "Core" {
    class Vehicle {
        - _id : unsigned int
        - _nic : NIC<SocketEngine>*
        - _protocol : Protocol<NIC<SocketEngine>>*
        - _components : std::vector<std::unique_ptr<Component>>
        - _base_address : TheAddress
        - _next_component_id : unsigned int
        + protocol() : TheProtocol*
        + next_component_address() : TheAddress
        + add_component(std::unique_ptr<Component>) : void
        + start_components() : void
        + stop_components() : void
        + start() : void
        + stop() : void
    }

    abstract class Component <<Abstract>> {
        # _vehicle : Vehicle*
        # _name : std::string
        # _running : std::atomic<bool>
        # _thread : pthread_t
        # _communicator : std::unique_ptr<TheCommunicator>
        # _protocol : TheProtocol*
        + Component(vehicle, name, protocol, address)
        + {abstract} run() : void
        + start() : void
        + stop() : void
        + send(dest, data, size) : int
        + receive(data, max_size, src*) : int
    }

    class SenderComponent {
        + run() : void
    }
    class ReceiverComponent {
        + run() : void
    }
}

package "Communication Stack" {
    class "Communicator<TheProtocol>" as TheCommunicator {
        - _channel : TheProtocol*
        - _address : TheAddress
        - _closed : std::atomic<bool>
        + send(dest, msg) : bool
        + receive(msg, src*) : bool
        + close() : void
    }

    class "Protocol<NIC<SocketEngine>>" as TheProtocol {
        - _nic : NIC<SocketEngine>*
        + send(from, to, data, size) : int
        + receive(buf, from, data, size) : int
        + {static} attach(obs, address) : void
        + {static} detach(obs, address) : void
    }

    class "NIC<SocketEngine>" as TheNIC {
        - _address : Address
        - _statistics : Statistics
        + send(buf) : int
        + receive(buf, src*, dst*, data, size) : int
        + alloc(dst, prot, size) : DataBuffer*
        + free(buf) : void
        + stop() : void
    }

    class SocketEngine {
        - _sock_fd : int
        - _ep_fd : int
        - _running : std::atomic<bool>
        + send(frame, size) : int
        + start() : void
        + stop() : void
        + {static} run(arg) : void*
    }
}

' Relationships
Vehicle "1" *--> "1" TheNIC : owns >
Vehicle "1" *--> "1" TheProtocol : owns >
Vehicle "1" *--> "0..*" Component : owns (unique_ptr) >
Component <|-- SenderComponent
Component <|-- ReceiverComponent
Component "1" *--> "1" TheCommunicator : owns (unique_ptr) >
Component "1" --> "1" TheProtocol : uses >
Component "1" --> "1" Vehicle : uses >

TheCommunicator "1" --> "1" TheProtocol : uses channel >
TheProtocol "1" --> "1" TheNIC : uses >
TheNIC --|> SocketEngine : inherits/implements >

Initializer ..> Vehicle : creates/uses >
Initializer ..> Component : creates >

@enduml 