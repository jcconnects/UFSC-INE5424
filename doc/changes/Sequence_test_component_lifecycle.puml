@startuml test_component_lifecycle
title Sequence Diagram: test_component_lifecycle()

actor User as "Test Function"
participant Initializer
participant Vehicle
participant TestComponent as Comp
participant "std::thread" as Thread

User -> Initializer ++ : create_vehicle(1)
Initializer -> Vehicle ++ : new Vehicle(1)
Vehicle -> Vehicle : Constructor logs
return Vehicle*
return vehicle

User -> Initializer ++ : create_component<TestComponent>(vehicle, "LifecycleTest")
Initializer -> Vehicle : get_protocol()
Initializer -> Vehicle : next_component_address()
Initializer -> Comp ++ : new TestComponent(vehicle, "LifecycleTest", protocol, address)
Comp -> Comp : Constructor logs
Comp -> Comp : Store protocol, address
return component_ptr (unique_ptr)
Initializer -> Vehicle : add_component(std::move(component_ptr))
return raw_ptr (comp)

User -> Comp ++ : start()
Comp -> Comp : Log "start() called"
Comp -> Comp : Set _running = true
Comp -> Thread ++ : pthread_create(&_thread, ..., run_wrapper, this)
Comp -> Comp : Log thread creation
return
Comp -> Comp : Log "thread starting execution"
Thread -> Comp : run()
Comp -> Comp : Log "running"
... Component runs (increments counter, sleeps) ...

User -> User : Log "Component started"

User -> std::this_thread ++ : sleep_for(1s)
return

User -> Comp ++ : stop()
Comp -> Comp : Log "stop() called"
Comp -> Comp : Set _running = false
Comp -> Thread : run() loop terminates
Comp -> Comp : Log "stopped with count X"
Comp -> Comp : Log "thread finished execution"
Comp -> Thread ++ : pthread_join(_thread)
return
Comp -> Comp : Log "thread joined"
return

User -> User : Log "Component stopped"

User -> Comp ++ : getCounter()
return counter
User -> User : TEST_ASSERT(counter > 0)
User -> User : Log counter value

User -> Vehicle -- : delete vehicle
Vehicle -> Vehicle : Log "~Vehicle() called!"
Vehicle -> Vehicle ++ : stop_components() [Called by destructor]
Vehicle -> Comp ++ : stop()
Comp -> Comp : Log "stop() called"
Comp -> Comp : _running is already false
Comp -> Thread : Thread already joined, join ignored/returns immediately
return
return
Vehicle -> Comp --: unique_ptr destructor calls ~TestComponent()
Comp -> Comp : unique_ptr members (_communicator) destroyed

@enduml 