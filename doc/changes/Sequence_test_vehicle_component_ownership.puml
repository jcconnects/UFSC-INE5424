@startuml test_vehicle_component_ownership
title Sequence Diagram: test_vehicle_component_ownership()

actor User as "Test Function"
participant Initializer
participant Vehicle
participant MemoryTestComponent as Comp
participant "std::thread" as Thread

User -> Initializer ++ : create_vehicle(1)
Initializer -> Vehicle ++ : new Vehicle(1)
Vehicle -> Vehicle : Constructor logs
return Vehicle*
return vehicle

User -> User : TEST_ASSERT(vehicle != nullptr)

loop 5 times : Component i (0 to 4)
    User -> Initializer ++ : create_component<MemoryTestComponent>(vehicle, "OwnershipTest" + i)
    Initializer -> Vehicle : get_protocol()
    Initializer -> Vehicle : next_component_address()
    Initializer -> Comp ++ : new MemoryTestComponent(vehicle, name, protocol, address)
    Comp -> Comp : Constructor logs allocation
    Comp -> Comp : Store protocol, address
    return component_ptr (unique_ptr)
    Initializer -> Vehicle : add_component(std::move(component_ptr))
    return raw_ptr (comp)
    User -> User : TEST_ASSERT(comp != nullptr)
end

User -> Vehicle ++ : start()
Vehicle -> Vehicle : Log "start() called"
Vehicle -> Vehicle : Log "starting"
Vehicle -> Vehicle ++ : start_components()
Vehicle -> Vehicle : Log "start_components() called"
loop 5 times : Component i (0 to 4)
    Vehicle -> Comp ++ : start()
    Comp -> Comp : Set _running = true
    Comp -> Thread ++ : pthread_create(&_thread, ..., run_wrapper, this)
    Comp -> Comp : Log thread creation
    return
    Comp -> Comp : Log "thread starting execution"
    Thread -> Comp : run()
    Comp -> Comp : Log "running"
    ... Component runs (sleeps in loop) ...
end
return
return

User -> std::this_thread ++ : sleep_for(1s)
return

User -> Vehicle ++ : stop()
Vehicle -> Vehicle : Log "stop() called"
Vehicle -> Vehicle ++ : stop_components()
Vehicle -> Vehicle : Log "stop_components() called"
loop 5 times : Reverse order (i = 4 down to 0)
    Vehicle -> Comp ++ : stop()
    Comp -> Comp : Log "stop() called"
    Comp -> Comp : Set _running = false
    Comp -> Thread : run() loop terminates
    Comp -> Comp : Log "stopped"
    Comp -> Comp : Log "thread finished execution"
    Comp -> Thread ++ : pthread_join(_thread)
    return
    Comp -> Comp : Log "thread joined"
    return
end
return
return

User -> Vehicle -- : delete vehicle
Vehicle -> Vehicle : Log "~Vehicle() called!"
Vehicle -> Vehicle ++ : stop_components() [Redundant Call]
Vehicle -> Vehicle : Log "stop_components() called"
loop 5 times : Reverse order (i = 4 down to 0)
    Vehicle -> Comp ++ : stop()
    Comp -> Comp : Log "stop() called"
    Comp -> Comp : _running is already false
    Comp -> Thread : Thread already joined, join ignored/returns immediately
    return
end
return
Vehicle -> Comp --: unique_ptr destructor calls ~MemoryTestComponent()
Comp -> Comp : unique_ptr members (_communicator, data_blocks) destroyed

@enduml 