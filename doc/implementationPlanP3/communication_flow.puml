@startuml P3 Communication Flow with Targeted Gateway Relay

hide footbox
title P3 Time-Triggered Publish-Subscribe Flow (Targeted Gateway Relay)

participant Vehicle as Veh
participant ConsumerComponent as CComp
participant CComp_Dispatcher as CDisp <<Thread>>
participant CComp_Comm as CComm <<Communicator>>
participant CComp_Handler as CHandler <<TypedDataHandler>>
participant GatewayComponent as GComp
participant GComp_Dispatcher as GDisp <<Thread>>
participant GComp_Comm as GComm <<Communicator>>
participant ProducerComponent as PComp
participant PComp_Dispatcher as PDisp <<Thread>>
participant PComp_Comm as PComm <<Communicator>>
participant PComp_RespThread as PRespT <<Thread>>
participant ProtocolLayer as Proto
participant NICLayer as NIC
participant Network

== Producer Registers with Gateway (on Startup) ==
Veh -> PComp : Start Component
PComp -> PComp_Comm : "new_message(REG_PRODUCER, PComp._produced_data_type)"
note right: PComp_Comm._address is PComp's address (MAC_VEHICLE:Port_Producer)\nunit_type field of msg carries the DataTypeId produced.
PComp_Comm -> PComp_Comm : Create "reg_msg"
PComp -> PComp_Comm : "send(reg_msg, MAC_VEHICLE:Port_Gateway_0)"
note right: Target is Gateway's known port (0) on own vehicle.
PComp_Comm -> Proto : "send(PComp_Addr, MAC_VEHICLE:0, reg_payload, size)"
Proto -> NIC : "send(eth_frame_reg)" (if MAC_VEHICLE != self, else internal)

NIC -> Proto : (Gateway's Protocol) "update(PROTO_ID, eth_frame_reg_buf)"
Proto -> GComm : "update(Port 0, eth_frame_reg_buf)"
GComm -> GComm : Deserialize "reg_msg_obj" from buffer.\nFilter: "msg_type == REG_PRODUCER".
GComm -> GDisp : Queue "eth_frame_reg_buf" by calling "Observer::update(c,buf)".

GDisp -> GComm : "receive(reg_msg_obj_final)"
GDisp -> GComp : Process registration:\n"_producer_registry[reg_msg_obj_final.unit_type()].push_back(reg_msg_obj_final.origin().port())"
note right GComp: Stores mapping: "DataTypeId_Produced -> Port_Producer"

== Consumer Sends EXTERNAL INTEREST ==

Veh -> CComp : Start Component (via "create_component" & "start_components")
CComp -> CComp : User calls "register_interest_handler(DataTypeId X, Period P, callback_func)"
CComp -> CComp_Handler : Create(DataTypeId X, callback_func)
CComp_Handler -> CHandler : _thread.start(processing_loop)
CComp -> CComp_Comm : "new_message(INTEREST, DataTypeId X, Period P)"
CComp_Comm -> CComp_Comm : Create "external_interest_msg"
CComp -> CComp_Comm : "send(external_interest_msg, BROADCAST_MAC:Port_Gateway_0)"
CComp_Comm -> Proto : "send(CComp_Addr, BROADCAST_MAC:0, interest_payload, size)"
Proto -> NIC : "send(eth_frame_ext_interest)"
NIC -> Network : Transmit Ethernet Frame (Physical Broadcast)

Network -> NIC : (Gateway's NIC) Receives Frame
NIC -> Proto : (Gateway's Protocol) "update(PROTO_ID, eth_frame_ext_interest_buf)"
Proto -> GComm : "update(Port 0, eth_frame_ext_interest_buf)"
GComm -> GComm : Deserialize "ext_interest_msg_obj" from buffer.\nFilter: "msg_type == INTEREST".
GComm -> GDisp : Queue "eth_frame_ext_interest_buf" by calling "Observer::update(c,buf)".

GDisp -> GComm : "receive(ext_interest_obj_final)"
GDisp -> GComp : Process external INTEREST:\n"requested_type = ext_interest_obj_final.unit_type()"\n"period = ext_interest_obj_final.period()"
GComp -> GComp : Lookup "requested_type" in "_producer_registry"

loop for each "target_producer_port" found in registry for "requested_type"
    GDisp -> GComm : "new_message(INTEREST, requested_type, period)"
    note right: Origin = GComp Address (from GComm._address)
    GComm -> GComm : Create "internal_interest_msg"
    GDisp -> GComm : "send(internal_interest_msg, MAC_VEHICLE:target_producer_port)"
    GComm -> Proto : "send(GComp_Addr, MAC_VEHICLE:target_producer_port, internal_interest_payload, size)"
    Proto -> PComm : (of specific producer) "update(target_producer_port, buf_internal_interest)"
    note left of PComm: This is PComm's Observer::update() method for its specific port.
    PComm -> PComm : Deserialize "internal_interest_msg_obj" from buffer.\nFilter: "msg_type == INTEREST" & "DataTypeId" matches "PComm._owner_component._produced_data_type".
    PComm -> PDisp : If filters pass, Queue "buf_internal_interest" for PDisp by calling "Observer::update(c,buf)".

    PDisp -> PComm : "receive(final_internal_interest_obj)"
    PDisp -> PComp : Process "final_internal_interest_obj".
    PComp -> PComp : Add "period" to "_received_interest_periods".
    PComp -> PComp : "update_gcd_period()".
    PComp -> PRespT : (Re)start or Signal "_producer_response_thread" with new GCD.
end

== Producer Sends RESPONSE (Same as before) ==

PRespT -> PRespT : Loop wakes based on GCD period.
PRespT -> PComp : "produce_data(DataTypeId X)"
PRespT -> PComm : "new_message(RESPONSE, DataTypeId X, 0, data_value, value_size)"
PComm -> PComm : Create "response_msg"
PRespT -> PComm : "send(response_msg, BROADCAST_MAC:BROADCAST_PORT)"
PComm -> Proto : "send(PComp_Addr, BROADCAST_MAC:BROADCAST_PORT, response_payload, size)"
Proto -> NIC : "send(eth_frame_response)"
NIC -> Network : Transmit Ethernet Frame

== Consumer Receives RESPONSE (Same as before) ==

Network -> NIC : (Consumer's NIC) Receives Frame
NIC -> Proto : (Consumer's Protocol) "update(PROTO_ID, eth_frame_response_buf)"
Proto -> CComm : "update(CComp_Port, eth_frame_response_buf)"
CComm -> CComm : Deserialize "response_msg_temp" from buffer.
CComm -> CComm : Filter 1 (Type): Check "response_msg_temp.type" against "CComp._active_interests".
CComm -> CComm : Filter 2 (Period): "current_time - req.last_accepted_response_time_us >= req.period_us".
alt Filter 1 & 2 Passed
    CComm -> CDisp : Queue "eth_frame_response_buf" for CDisp via "Observer::update(c,buf)".
else Filter Failed
    CComm -> Proto : "free(eth_frame_response_buf)"
end

CDisp -> CComm : "receive(filtered_response_obj)"
CDisp -> CDisp : "heap_msg = new Message(filtered_response_obj)"
CDisp -> CComp : "_internal_typed_observed.notify(filtered_response_obj.type(), heap_msg)"
CComp -> CHandler : (for DataTypeId X) "update(DataTypeId X, heap_msg)"

CHandler -> CHandler : "processing_loop()" unblocks, gets "heap_msg".
CHandler -> CComp : "callback_func(*heap_msg)" executed.
CHandler -> CHandler : "delete heap_msg".

@enduml