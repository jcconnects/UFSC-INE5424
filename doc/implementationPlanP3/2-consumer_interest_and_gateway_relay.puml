@startuml Consumer Interest and Gateway Relay Flow (Inter-Vehicle)

title Consumer on Veh A Sends Interest; Gateways on Veh A & B Relay

participant ConsumerComp_A as "Consumer (Veh A)" #Application
participant CComm_A as "Comm_A (Veh A)" <<Communicator>>
participant Proto_A as "Protocol (Veh A)" <<Protocol>>
participant NIC_A as "NIC (Veh A)" <<NIC>>

participant Network #Black

participant GatewayComp_A as "Gateway (Veh A)" #Application
participant GComm_A as "GComm_A (Veh A)" <<Communicator>>

participant GatewayComp_B as "Gateway (Veh B)" #Application
participant GComm_B as "GComm_B (Veh B)" <<Communicator>>
participant Proto_B as "Protocol (Veh B)" <<Protocol>>
participant NIC_B as "NIC (Veh B)" <<NIC>>

participant ProducerComp_A as "Producer (Veh A)" #Application
participant PComm_A as "PComm_A (Veh A)" <<Communicator>>
participant PRespT_A as "RespThread_A (Veh A)" <<Thread>>

participant ProducerComp_B as "Producer (Veh B)" #Application
participant PComm_B as "PComm_B (Veh B)" <<Communicator>>
participant PRespT_B as "RespThread_B (Veh B)" <<Thread>>


box "Vehicle A" #LightBlue
    participant ConsumerComp_A
    participant CComm_A
    participant GatewayComp_A
    participant GComm_A
    participant ProducerComp_A
    participant PComm_A
    participant PRespT_A
    participant Proto_A
    participant NIC_A
end box

box "Vehicle B" #LightGreen
    participant GatewayComp_B
    participant GComm_B
    participant ProducerComp_B
    participant PComm_B
    participant PRespT_B
    participant Proto_B
    participant NIC_B
end box


== Consumer (Veh A) Sends INTEREST ==
ConsumerComp_A -> CComm_A : "set_interest(DataTypeId X, Period P, callback)"
CComm_A -> CComm_A : Store _interested_data_type=X, _period_us=P
ConsumerComp_A -> CComm_A : "send_interest_message()"
CComm_A -> CComm_A : Create "interest_msg {Origin=Addr_CCompA, Type=INTEREST, ...}"
note right of CComm_A: Addr_CCompA = MAC_VehA:Port_CCompA
CComm_A -> Proto_A : "send(interest_msg, BROADCAST_MAC:Port_Gateway_0)"
Proto_A -> NIC_A : "send(eth_frame_interest)"
NIC_A -> Network : Transmit Ethernet Frame (Physical Broadcast)

== Gateways on Veh A & Veh B Receive INTEREST ==
Network -> NIC_A : (Veh A's NIC) Receives Frame
NIC_A -> Proto_A : "update(eth_frame_interest_buf)" (for GatewayComp_A)
Proto_A -> GComm_A : "update(Port_Gateway_0, eth_frame_interest_buf)"
GComm_A -> GComm_A : Observer::update() unblocks GComm_A::receive()
activate GatewayComp_A
GatewayComp_A -> GComm_A : "receive(interest_obj_A)"
GatewayComp_A -> GComm_A : "send(interest_obj_A, Address(_vehicle->address(), INTERNAL_BROADCAST_PORT))"
GComm_A -> Proto_A : "send(interest_obj_A, Address(_vehicle->address(), INTERNAL_BROADCAST_PORT))"
Proto_A -> Proto_A : Uses notifyInternalBroadcast() for Port 1 observers
deactivate GatewayComp_A
note right of GatewayComp_A : Relay to internal listeners on Veh A (Port 1)

Network -> NIC_B : (Veh B's NIC) Receives Frame
NIC_B -> Proto_B : "update(eth_frame_interest_buf)" (for GatewayComp_B)
Proto_B -> GComm_B : "update(Port_Gateway_0, eth_frame_interest_buf)"
GComm_B -> GComm_B : Observer::update() unblocks GComm_B::receive()
activate GatewayComp_B
GatewayComp_B -> GComm_B : "receive(interest_obj_B)"
GatewayComp_B -> GComm_B : "send(interest_obj_B, Address(_vehicle->address(), INTERNAL_BROADCAST_PORT))"
GComm_B -> Proto_B : "send(interest_obj_B, Address(_vehicle->address(), INTERNAL_BROADCAST_PORT))"
Proto_B -> Proto_B : Uses notifyInternalBroadcast() for Port 1 observers
deactivate GatewayComp_B
note right of GatewayComp_B : Relay to internal listeners on Veh B (Port 1)

== Producers on Veh A & Veh B Receive Relayed INTEREST ==

'Relay on Vehicle A'
Proto_A -> PComm_A : "update(Port_Internal_Broadcast_1, cloned_buf_A)"
    PComm_A -> PComm_A : Deserialize, Filter by Component Type, Message Type & DataTypeId
    alt Filters Passed (for PComp_A)
        PComm_A -> ProducerComp_A : "handle_received_interest(period)"
        ProducerComp_A -> PRespT_A : Signal/Wake with new GCD
    else Filters Failed
        PComm_A -> Proto_A : free(cloned_buf_A)
    end

'Relay on Vehicle B'
Proto_B -> PComm_B : "update(Port_Internal_Broadcast_1, cloned_buf_B)"
    PComm_B -> PComm_B : Deserialize, Filter by Component Type, Message Type & DataTypeId
    alt Filters Passed (for PComp_B)
        PComm_B -> ProducerComp_B : "handle_received_interest(period)"
        ProducerComp_B -> PRespT_B : Signal/Wake with new GCD
    else Filters Failed
        PComm_B -> Proto_B : free(cloned_buf_B)
    end

@enduml